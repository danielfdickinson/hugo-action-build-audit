name: "Hugo Build & Audit"
description: "Checkout, build, and audit a Hugo site"
inputs:
  checkout-fetch-depth:
    description: "Fetch depth: Use 0 to fetch all history if using .GitInfo or .Lastmod"
    required: true
    default: "0"
  checkout-submodules:
    description: "Fetch git submodules: false, true, or recursive"
    required: true
    default: "false"
  do-minify:
    description: "If present, minify site using --minify during build"
    required: false
  hugo-env:
    description: "Hugo environment (production, development, etc)"
    required: true
    default: "production"
  source-directory:
    description: "Where the source for the site lives"
    required: false
  hugo-extended:
    description: "Hugo Extended"
    required: true
    default: "true"
  hugo-version:
    description: "Hugo Version"
    required: true
    default: "0.89.4"
  upload-html-validate-config:
    description: "If present, include config for html-validate in artifact (if present)"
    required: false
  upload-output-directory:
    description: "Output directory to upload (default 'public')"
    required: true
    default: "public"
  upload-site-as:
    description: "Artifact to create containing the Hugo site"
    required: false
  upload-site-retention:
    description: "Retention period in days for Hugo site artifact"
    required: false
    default: "1"
  use-lfs:
    description: "Use LFS when checking out out repo"
    required: true
    default: "false"
runs:
  using: "composite"
  steps:
    - uses: actions/checkout@v2
      with:
        lfs: ${{ inputs.use-lfs }}
        submodules: ${{ inputs.submodules }}
        fetch-depth: ${{ inputs.checkout-fetch-depth }}
    - name: "Install Hugo"
      uses: peaceiris/actions-hugo@v2
      with:
        hugo-version: ${{ inputs.hugo-version }}
        extended: ${{ inputs.hugo-extended }}
    - name: "Hugo modules cache"
      uses: actions/cache@v2
      with:
        path: /tmp/hugo_cache
        key: ${{ runner.os }}-hugomod-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-hugomod-
    - name: "Hugo resources cache"
      uses: actions/cache@v2
      with:
        path: resources
        key: ${{ runner.os }}-hugoresources
    - name: "Build site so it is suitable for auditing"
      shell: bash
      env:
        HUGO_MINIFY_TDEWOLFF_HTML_KEEPCOMMENTS: "true"
        HUGO_ENABLEMISSINGTRANSLATIONPLACEHOLDERS: "true"
        HUGO_ENV: ${{ inputs.hugo-env }}
        INPUT_DO_MINIFY: ${{ inputs.do-minify }}
        SOURCE_DIRECTORY: ${{ inputs.source-directory }}
      run: hugo ${SOURCE_DIRECTORY:+-s "$SOURCE_DIRECTORY"} --gc --cleanDestinationDir ${INPUT_DO_MINIFY:+--minify}
    - name: "Audit site for missed Hugo issues"
      shell: bash
      run: |
        set -o pipefail; \
        if grep -iIvrnE "grep(.+(-- raw HTML omitted --|ZgotmplZ|hahahugo|\\\[i18n\\\])+)" "${SOURCE_DIRECTORY:+$SOURCE_DIRECTORY/}"public/ | \
        grep -iIoE "<\!-- raw HTML omitted -->|ZgotmplZ|hahahugo|\[i18n\]"; then \
        echo "not ok"; exit 1; else echo "ok"; exit 0; fi
    - name: "Build site without audit markup"
      shell: bash
      env:
        HUGO_ENV: ${{ inputs.hugo-env }}
        INPUT_DO_MINIFY: ${{ inputs.do-minify }}
        SOURCE_DIRECTORY: ${{ inputs.source-directory }}
      run: hugo ${SOURCE_DIRECTORY:+-s "$SOURCE_DIRECTORY"} --gc --cleanDestinationDir ${INPUT_DO_MINIFY:+--minify}
    - name: "Bundle site for upload as artifact"
      if: inputs.upload-site-as
      shell: bash
      env:
        INPUT_OUTPUT_DIRECTORY: ${{ inputs.upload-output-directory }}
        INPUT_UPLOAD_HTML_VALIDATE_CONFIG: ${{ inputs.upload-html-validate-config }}
        SOURCE_DIRECTORY: ${{ inputs.source-directory }}
      run: tar ${SOURCE_DIRECTORY:+-C "$SOURCE_DIRECTORY"} -cf hugo-site.tar "${INPUT_OUTPUT_DIRECTORY}" ${INPUT_UPLOAD_HTML_VALIDATE_CONFIG:+.htmlvalidate*}
    - name: "Upload site as an artifact"
      uses: actions/upload-artifact@v2
      if: inputs.upload-site-as
      with:
        name: ${{ inputs.upload-site-as }}
        path: hugo-site.tar
        if-no-files-found: error
        retention-days: ${{ inputs.upload-site-retention }}
